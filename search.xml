<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[pandas笔记]]></title>
      <url>/2017/10/17/pandas%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>首先这两行，pandas最常用的两个数据结构<strong>Series</strong>和<strong>DataFrame</strong></p>
<pre><code>from pandas import Series, DataFrame
import pandas as pd
</code></pre><hr>
<p>##<strong>Series</strong></p>
<pre><code>s = Series([100, &quot;Python&quot;, &quot;Soochow&quot;, &quot;Qiwsir&quot;], index = [1,2,3,4])
</code></pre><p>Series的构造函数两个参数，第一个参数values类型是List或Dictionary，第二个参数index类型是List。</p>
<p><strong>构造与赋值</strong>：</p>
<ul>
<li>如果同时提供了两个参数，且均为List，那么要求两个参数大小一致；</li>
<li>如果同时提供了两个参数，第一个为Dictionary，则index会自动匹配Dictionary中的key，匹配失败的的index对应值为NaN，Dictionary中没有被匹配到的键值对会被删除（2B问题：Dictionary中没有相同的Key）；</li>
<li>如果仅提供第一个参数且为List，则index自动生成，从0到n-1；</li>
<li>如果仅提供第一个参数且为Dictionary，则index就是Dictionary中的key;</li>
<li>如果仅提供index，则values全为NaN。</li>
</ul>
<p>构造后可以用<code>s.values</code>和<code>s.index</code>分别提取值和索引，均为List，其中index可以直接替换成相同大小的另一个List，而values不能。</p>
<p><strong>取值</strong>：</p>
<p>s2是个Series，重载了&gt;符号，&gt;12会得到一个新的Series，这个Series的index就是其index，而values变为True或False。把这么样一个值为True或False的Seriese作为条件去取值，效果如下：</p>
<pre><code>#In[1]:
s1 = Series([5,8,9])
s2 = Series([11,12,13])
s1[s2&gt;12]

#Out[1]:
#2    9
#dtype: int64
</code></pre><p>#</p>
<pre><code>#In[2]
s3 = Series([1,2], index = [&quot;x&quot;, &quot;y&quot;])
s3[&quot;x&quot;]

#Out[2]
#1
#dtype: int64
</code></pre><p><strong>计算</strong>：</p>
<ul>
<li><p>s1 + s2：对应index的值相加，不可加或没有值的部分结果为NaN</p>
</li>
<li><p>s1 * s2：对应index的值相乘，不可乘或没有值的部分结果为NaN</p>
</li>
<li><p>s1 + 5：s1中每一项的value值＋5，不可计算结果为NaN</p>
</li>
</ul>
<hr>
<p>##<strong>DataFrame</strong><br>DataFrame是二维数据结构，列为columns，行为index。</p>
<pre><code>data = {&quot;name&quot;:[],
        &quot;marks&quot;:[], 
        &quot;price&quot;:[]}
</code></pre><p>艹不写了这全都有</p>
<p><a href="http://wiki.jikexueyuan.com/project/start-learning-python/311.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/start-learning-python/311.html</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[接口与集合类笔记]]></title>
      <url>/2017/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%9B%86%E5%90%88%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>// 用集合类库中的部分类与接口之间的关系来理解接口和常用集合的概念。</p>
<p><strong>// 注意力不集中可能导致写东西效率减半甚至烂尾。</strong></p>
<p>首先几个概念：</p>
<p>接口是一种特殊的类，其中的方法全部为public，域全部为public static final（常量），即不能有静态方法，也没有实例域。</p>
<p>接口的定义如下，一个.java文件中也只有这么一个public，文件名与接口名一致（和类一样）</p>
<pre><code>public interface InterfaceName
{
    // 方法、常量
}
</code></pre><p>接口之间也有继承关系，和类的继承关系一样</p>
<pre><code>public interface List&lt;E&gt; extends Collection&lt;E&gt;
{
    // 覆盖Collection中的方法
    ...

    // 增加新的方法
    ...
}
</code></pre><p>接口的意义在于Java不支持类的多重继承，而允许类或子接口来实现或继承多个已存在的接口，提高了灵活性（还有可重用性？）。</p>
<p>由于接口中的方法不能实现，可以用虚类，实现若干接口的全部或若干方法，作为基类供其他子类使用，同时这些子类可以实现基类没有实现的接口。<br>这样这个基类实现了很多常用的接口的方法，别的类要使用这些接口的时候就不用再把它们全部重新实现一遍，直接继承这个基类即可。<br>例如AbstractCollection类实现了Collection接口，而具体的集合类大多都从AbstractCollection类产生，不用重复实现Collection中的很多方法。</p>
<p>集合类库将接口(interface)和实现(implementation)分离。</p>
<hr>
<p>集合类的基本接口：Collection<e>，继承Iterable接口。</e></p>
<pre><code>// Iterable有forEach/iterator/spliterator三个方法
public interface Collection&lt;E&gt; extends Iterable&lt;E&gt;
{
    boolean add(E element); // 向集合中添加一个对象
    Iterator&lt;E&gt; iterator(); // 返回一个实现了Iterator接口的对象
    ...
}
</code></pre><p>迭代器Iterator接口：</p>
<pre><code>public interface Iterator&lt;E&gt;
{
    E next();            // 指针右移一位，并将操作数设置为指针左边第一个元素
    boolean hasNext();    // 判断指针右边是否为null
    void remove();        // 去掉一个元素
}
</code></pre><p>Collection接口扩展了Iterator接口，所以实现了Collection接口的类都会有迭代器可以使用。<br>// 实际上Iterable接口已经扩展了Iterator接口</p>
<p>AbstractCollection<e>是实现了Collection接口的一个抽象类，具体的集合类可以用它来扩展。</e></p>
<pre><code>public abstract class AbstractCollection&lt;E&gt; implements Collection&lt;E&gt;
{
    ...
    public abstract Iterator&lt;E&gt; iterator();
    public boolean contains(Object obj)
    {
        for (E element : this)
            if (element.equals(obj))
                return true;
        return false;
    }
    ...
}
</code></pre><p>下图画出了部分接口和类之间的关系，红色箭头为派生，绿色箭头为实现，橙色框表示最顶层没有父亲（Object类除外），绿色框表示没有儿子，是我们实际使用的类。</p>
<p><img src="http://a2.qpic.cn/psb?/V10zN0kO1jyH6V/LQn7rWhHdFkFJYuwevKJJ2aC3kR8cXhm3JIkqTtWDf8!/b/dB4BAAAAAAAA&amp;bo=oAKAAgAAAAADBwI!&amp;rf=viewer_4" alt=""></p>
<p>框框每跟着箭头往下指，就会多出一些内容，或被覆盖一些内容，会出现新的特性，专用性会提高。</p>
<p>如LinkedList类的父亲的父亲(AbstractList类)实现了List接口，同时实现了Iterator接口的ListIterator子接口(增加了add方法)。<br>可以用listIterator()方法获取实现了ListIterator接口的迭代器对象。</p>
<p>从AbstractCollection派生出来的各种不同的分支有着不同的特性，如Queue和Set有着不同的功能；<br>每个分支也可能实现了其他的接口，如TreeSet这条分支还实现了SortedSet这个接口，然而HashSet就没有。</p>
<hr>
<p>集合类另一个特殊的分支Map（映射表），它不从AbstractCollection派生，而是从实现了Map接口的AbstractMap派生，自成一派。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Java学习笔记]]></title>
      <url>/2017/10/17/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
      <content type="html"><![CDATA[<p>JAVA不只是一种语言，是一个完整的平台，有一个庞大的库，其中包含了很多可重用的代码和一个提供安全性、跨操作系统的可移植性，以及自动垃圾回收等服务的执行环境。</p>
<p><strong>永远不要把话说绝</strong></p>
<hr>
<p>###4个概念</p>
<ol>
<li><strong>JVM</strong><ul>
<li>JAVA虚拟机，解释执行JAVA程序编译后产生的JVM的字节码</li>
<li>处理和操作系统的交流，利用操作系统的接口来使用硬件（CPU）</li>
</ul>
</li>
<li><strong>JRE</strong><ul>
<li>JAVA运行时环境，JVM的超集，JVM是对特定平台或操作系统，而JRE是一般概念，代表完整的运行时环境</li>
<li>jre目录中的所有jar文件和可执行文件都是运行时的一部分，程序运行时JRE变成了特定的JVM</li>
<li>包含虚拟机但不包含编译器</li>
</ul>
</li>
<li><strong>JDK</strong><ul>
<li>JAVA开发工具箱，编写JAVA应用所需要的所有jar文件和可执行文件</li>
<li>JRE是JDK的一部分，下载JDK里面就有一个jre的目录</li>
<li>tools.tar包含用于执行java文档的类和用于类签名的jar包】</li>
</ul>
</li>
<li><strong>JIT</strong>（？）<ul>
<li>即时编译器，把字节码变成机器码，提高JVM的效率</li>
<li>运行时启用，而不是在运行之前（解释器？）</li>
<li>【得深入了解JVM】</li>
</ul>
</li>
</ol>
<hr>
<p>###11个特性</p>
<ol>
<li><strong>简单性</strong><ul>
<li>没有头文件、指针运算、指针语法、结构、联合、操作符重载、虚基类等C/C++语言里的特性（带来的麻烦远多于好处，why）</li>
</ul>
</li>
<li><strong>面向对象</strong><ul>
<li>4-6章</li>
</ul>
</li>
<li><strong>网络技能</strong><ul>
<li>可以通过URL打开和访问网络上的对象，就像访问本地文件一样</li>
<li>远程方法调用机制使得分布式对象之间可以进行通信（卷II）</li>
<li>适用于网络编程</li>
<li><strong>Netty</strong>(from屌哥)</li>
</ul>
</li>
<li><strong>健壮性</strong><ul>
<li>编译器能检测出很多其他语言中仅在运行时才能检测出的问题</li>
<li>不必使用指针构造字符串、数组等结构</li>
<li>有指针的能力（链表）</li>
<li>永远不会存取一个坏的指针，造成内存分配的错误，也不必防范内存泄漏</li>
</ul>
</li>
<li><strong>安全性</strong><ul>
<li>JAVA适用于网络，分布式环境</li>
<li>不会出现运行时堆栈溢出</li>
<li>不会在自己的处理空间之外破坏内存</li>
<li>不会未经授权读写文件</li>
</ul>
</li>
<li><strong>体系结构中立</strong><ul>
<li>【个人理解】这里的体系结构指CPU指令集，JAVA程序运行在JAVA虚拟机上，所以不论什么CPU，只要能运行JAVA虚拟机，任何一个JAVA程序都能在上面运行，所以有体系结构中立的特性</li>
<li>JAVA虚拟机和操作系统是并列关系，C程序编译后的目标文件由操作系统解释执行，JAVA程序编译后的目标文件由JAVA虚拟机来解释执行，但是操作系统直接使用硬件，而JAVA虚拟机通过操作系统的接口使用硬件</li>
<li>C/C++:程序语言代码 -&gt; 汇编（依赖于CPU体系结构） -&gt; 供机器识别的机器码（二进制文件）</li>
<li>JAVA:程序语言代码 -&gt; 供JAVA虚拟机使用的目标文件格式（体系结构中立的虚拟机字节码）</li>
<li>参见<a href="http://blog.csdn.net/cutesource/article/details/5904542" title="Java代码编译和执行的整个过程" target="_blank" rel="external">Java代码编译和执行的整个过程</a></li>
</ul>
</li>
<li><strong>可移植性</strong><ul>
<li>JAVA规范中没有“依赖具体实现”的地方（？）</li>
<li>基本数据类型的大小以及有关算法有明确说明（统一），如int永远为32位整数</li>
<li>字符串用Unicode格式存储</li>
</ul>
</li>
<li><strong>解释型</strong><ul>
<li>JAVA编译过程是把程序变成JVM字节码，但是执行的时候使用JIT（即时编译器）把JVM字节码变成目标代码来执行</li>
<li>一个JAVA程序对应一个JVM字节码，但是不同操作系统下的JVM对同一个JVM字节码的解释不尽相同</li>
<li>JVM在执行字节码时把字节码解释成具体平台上的机器指令执行</li>
</ul>
</li>
<li><strong>高性能</strong>    <ul>
<li>字节码可以（在运行时）快速翻译成当前CPU对应的机器码</li>
</ul>
</li>
<li><strong>多线程</strong><ul>
<li>JAVA多线程处理十分便捷</li>
<li>JAVA把多线程的实现交给底层操作系统或线程库来完成</li>
</ul>
</li>
<li><strong>动态性</strong><ul>
<li>在库中自由添加新方法和实例变量，对客户端没有任何影响</li>
</ul>
</li>
</ol>
<hr>
<ul>
<li><p>第一个程序</p>
<pre><code>public class FirstSample
{
    public static void main(String[] args)
    {
        System.out.println(&quot;We will not use &apos;Hello, World!&apos;&quot;);
    }
}
</code></pre></li>
<li><p>Java对大小写敏感，程序、工程的入口为main()函数（不是Main）。</p>
</li>
<li><p>public为访问修饰符（access modifier），用于控制程序的其他部分对这段代码的访问权限。</p>
</li>
<li><p>class表明java程序中的全部内容都包含在类中，类是一个加载程序逻辑的容器，逻辑定义了程序的行为。</p>
</li>
<li><p>class后紧跟类名，命名规则以大写字母开头的名词，驼峰命名法，参见《阿里巴巴Java开发手册v1.2.0》</p>
</li>
<li><p>源代码的文件名必须与公共类的名字相同，并用.java作为扩展名。所以上述代码必须命名为FirstSample.java（这里同样大小写敏感）。</p>
</li>
<li><p>正确完成上述操作后即可编译，编译器会将产生的字节码文件自动命名为FirstSample.class，并与源文件存储在同一目录下。</p>
</li>
<li><p>运行时使用命令java FirstSample，而不要带.class。</p>
</li>
<li><p>运行编译程序时，Java虚拟机将从指定类中的main方法（函数）开始执行。</p>
</li>
<li><p>使用{}划分程序块。</p>
</li>
<li><p>main必须是静态的，必须有一个外壳类。</p>
</li>
<li><p>如果希望在终止程序时返回其他代码（关键字void表示main没有正常退出），可以使用System.exit方法。</p>
</li>
<li><p>（.）点号用于调用方法，通用语法为object.method(parameters)。</p>
</li>
</ul>
<hr>
<ul>
<li><p>8种基本类型</p>
<ul>
<li>int 4字节(-2147483648 ~ 2147483647)<ul>
<li>十六进制有前缀0x，八进制有前缀0（容易混淆，不建议用）</li>
<li>二进制有前缀0b，如（0b1111_0100_0010_0100_0000），下划线方便阅读，编译器会自动忽略。</li>
</ul>
</li>
<li>short 2字节(-32768 ~ 32767)</li>
<li>long 8字节(-9 223372 036854 775808 ~ 9 223372 036854 775807)<ul>
<li>长整型后有一个L后缀，如（4000000000L），按照《阿里巴巴Java开发手册v1.2.0》这个L需要大写，否则小写l容易和数字1混淆。</li>
</ul>
</li>
<li>byte 1字节(-128 ~ 127)<ul>
<li>short和byte类型主要用于特定场合，如底层文件处理或者控制占用存储空间量的大数组。</li>
</ul>
</li>
<li>float 4字节(±3.40282347E + 38F)，有效6~7位<ul>
<li>float类型后有F后缀，如3.14F，如果不写，3.14则会被默认为double类型，相当于3.14D。</li>
</ul>
</li>
<li>double 8字节(±1.79769313486231570E + 308)，有效15位。<ul>
<li>Double.isNaN(x)用于判断x是否溢出。</li>
</ul>
</li>
<li>char 字符常量（注意编码相关问题）</li>
<li>boolean 两个值：false和true，整形和布尔值之间不能相互转换。<br><br><br></li>
</ul>
</li>
<li><p>Java的变量名中“字母”和“数字”的范围较大，包含在某种语言中代表字母的任何Unicode字符，如希腊人的π、德国人的ä等，不能有空格，长度不限，大小写敏感。</p>
</li>
<li><p>为初始化的变量不可使用，会报错//ERROR–variable not initialized</p>
</li>
<li><p>在C、C++中，int i = 1;和extern int i;分别表示定义和声明。但在Java中不区分变量的声明和定义。</p>
</li>
<li><p>用final指示常量（不可修改，否则报错），常量名由大写字母构成，单词间由下划线分割（区别于驼峰命名法则）</p>
<pre><code>public class Constants
{
    public static void main(String[] args)
    {
        final double CM_PER_INCH = 2.54;
        double paperWidth = 8.5;
        double paperHight = 11;
        System.out.println(&quot;Paper size in centimeters: &quot;
            + paperWidth * CM_PER_INCH + &quot;by&quot; + paperHeight * CM_PER_INCH);
    }
}
</code></pre></li>
<li><p>类常量，把常量定义在类的最外层，这样类中的所有方法都可以使用这个常量，用static final修饰</p>
<pre><code>public class Constants
{
    public final double CM_PER_INCH = 2.54;
    //这行中的public表示其他的类也可以使用这个常量

    public static void main(String[] args)
    {
        double paperWidth = 8.5;
        double paperHight = 11;
        System.out.println(&quot;Paper size in centimeters: &quot;
            + paperWidth * CM_PER_INCH + &quot;by&quot; + paperHeight * CM_PER_INCH);
    }
}
</code></pre></li>
<li><p>const也是java的保留字，但是未使用。</p>
</li>
</ul>
<hr>
<ul>
<li><p>在方法前加上strictfp关键字，表明这个方法中的所有计算必须使用严格的浮点计算产生理想的结果，这个关键字也可以写在类前。<br>意义：如double w = x <em> y / z;很多intel处理器在计算x </em> y后将中间结果保存在80位的浮点数寄存器中，除以z后再截断至64位（更精确）；<br>而一些始终使用64位的机器计算结果可能不同，在中间结果就已截断至64位（可能溢出，而且截断需要消耗时间，但是确保了可移植性）。</p>
<pre><code>public static strictfp void main(String[] args)
</code></pre></li>
<li><p>自增运算如 x++和++x 等，与C语言中的语法一致，但最好不要在别的表达式中使用，不易读而且真的会有bug！劳资的快排在这里莫名其妙的炸了。</p>
</li>
<li><p>逻辑运算：=、 !=、 &lt;、 &gt;、 &lt;=、 &gt;=、 &amp;&amp;、 ||等，其中&amp;&amp;和||按短路方式求值，当第一个操作数可以确定结果，将会忽略第二个值（可用于优化）</p>
</li>
<li><p>位运算（哇这个太高端了一直不敢用，但是真的非常快）</p>
<ul>
<li>&amp; 与</li>
<li>| 或</li>
<li>^ 异或</li>
<li><p>~ 非</p>
<p>example:如果n是整形变量，且二进制表示的n从右往左第四位是1，则下面代码返回1，否则返回0。</p>
<pre><code>int fourthBitFromRight = (n &amp; 0b1000) / 0b1000;
</code></pre><p>“&gt;&gt;”和”&lt;&lt;”是二进制位进行右移或左移的移位运算符：</p>
<pre><code>int fourthBitFromRight = (n &amp; (1 &lt;&lt; 3)) &gt;&gt; 3;
</code></pre><p>“&gt;&gt;&gt;”是用0填充高位(负数操作结果会不同，如果对原码反码补码不熟尽量不要使用)，”&gt;&gt;”用符号位填充高位。</p>
<p>移位运算符右侧的参数需要进行模32(int)或64(long)。</p>
</li>
</ul>
</li>
<li><p>数学函数，Math类，有sin/cos/tan/atan/atan2/exp/log/log10等方法和PI/E等近似值常量。</p>
</li>
<li><p>还有一个StrictMath类，它比Math类慢，但是确保在任何平台上得到相同的结果。</p>
</li>
<li><p>强制类型转换与截断。</p>
</li>
<li><p>运算符级别与括号（实际上完全可以多写几行来增加可读性，但面试笔试中喜欢发神经出这种问题来判断对语言的掌握程度）</p>
<ul>
<li>“&amp;&amp;”比”||”优先级高，<code>a &amp;&amp; b || c</code>等价于<code>(a &amp;&amp; b) || c</code>。</li>
<li>“+=”是右结合运算符，<code>a += b += c</code>等价于<code>a += (b += c)</code>。</li>
<li>其他参见P45.</li>
</ul>
</li>
<li><p>枚举（学一下，在学C的时候就没怎么用过）</p>
<pre><code>enum Size = {SMALL, MEDIUM, LARGE, EXTRA_LARGE};
Size s = Size.MEDIUM;
</code></pre><p>  Size类型的变量只能存储这个类型声明中的枚举值，或者null值，表示没有设置任何值，详见Ch5.</p>
</li>
</ul>
<hr>
<ul>
<li><p>字符串，Java没有内置的字符串类型，在标准Java类库中有一个预定义类叫String，每个双引号括起来的字符串都是String类的一个实例。</p>
<ul>
<li><p>子串substring(a, b)，提取从被调用者的第a个字符到第b - 1个字符之间的子串，长度为b - a。</p>
<pre><code>String greeting = &quot;Hello&quot;;
String s = greeting.substring(0, 3);//s = &quot;Hel&quot;
</code></pre></li>
</ul>
</li>
<li><p>拼接，加号(+)，需要注意的是一个字符串与一个非字符串的值拼接时，后者被转换成字符串（任何一个Java对象都可以转换成字符串）。</p>
<pre><code>int age = 13;
String rating = &quot;PG&quot; + age;//rating = &quot;PG13&quot;
</code></pre></li>
<li><p>不可变字符串，Java字符串中的字符不可修改，String类没有提供修改字符串的方法，所以String类对象称为不可变字符串，如果想让上面的Hello变成Help!则只能通过：</p>
<pre><code>greeting = greeting.substring(0, 3) + &quot;p!&quot;;
</code></pre><p>  这样效率不高，但是编译器可以让字符串共享。<br>  各种各样的字符串放在公共的存储池中，字符串变量指向存储池中的相应位置，复制一个字符串变量，原始字符串与复制的字符串共享相同的字符。（多看代码即可发现，修改字符串的使用率远小于比较字符串的使用率，故这种模式有利于总体提升。）（例外：源自于文件或键盘的单个字符或较短字符串汇集成字符串，Java对此提供一个独立的类。）</p>
</li>
<li><p><strong>Java中的字符串比较不是“==”，而是使用字符串类的equals方法，字符串变量和常量都可以用，使用equalsIgnoreCase()还可以忽略大小写：</strong></p>
<pre><code>String str = &quot;Hello&quot;;
str.equals(&quot;Hello!&quot;);//返回false
str.equals(&quot;Hello&quot;);//返回true
&quot;Hello&quot;.equalsIgnoreCase(&quot;hello&quot;);//返回true
</code></pre></li>
<li><p><strong>空串与null串不同</strong>，空串””是长度为0的字符串，用<code>if (str.length() == 0)</code>或<code>if (str.equals(&quot;&quot;))</code>来判断，它也是一个Java对象，有自己的长度0和内容(空)。而值为null是另一种特殊情况，用<code>if (str == null)</code>来判断。如果要判断一个字符串既不是null也不是空串，则在写判断语句时应写<code>if (str != null &amp;&amp; str.length() != 0)</code>，因为”&amp;&amp;”具有截断性，只有在str不是null值的时候才会判断长度是否为0，而对一个值为null的字符串调用方法会出错。</p>
</li>
<li><p><strong><em>代码点与代码单元</em></strong>，一个代码单元是一个char，一个ascii码，一个utf-16编码；一个代码点是一个Unicode编码，可能由一个或多个utf-16编码的代码单元构成。字符串中存储的是若干代码点，不能用char来遍历，否则如果其中某个字符是双字节字符，则会出现编码出错。遍历字符串的方法如下：</p>
<pre><code>int cp = str.codePointAt(i);
if (Character.isSupplementaryCodePoint(cp))
    i += 2;
else
    i++;
</code></pre><p>回退：</p>
<pre><code>i--;
if (Character.isSurrogate(str.charAt(i)))
    i--;
int cp = str.codePointAt(i);
</code></pre></li>
<li><p>StringBuilder类，用于将多个（较短）字符串构建成新的字符串，相比起直接拼接，效率上会有提升。用法如下：</p>
<pre><code>StringBuilder builder = new StringBuilder();
builder.append(ch);
builder.append(str);
String completedString = builder.toString();
</code></pre><p>  StringBuilder类还有如下方法（更多查看API）：</p>
<pre><code>StringBuilder()//构造
int length()//代码单元数量
void setCharAt(int i, char c)//设置第i个代码单元为c
StringBuilder insert(int offset, String str)//在offset位置插入一个字符串或字符，返回this
StringBuilder delete(int startIndex, int endIndex)//删除从startIndex到endIndex-1的代码单元，并返回this
StringBuilder toString()//返回一个与builder中保存内容一致的字符串
</code></pre></li>
</ul>
<hr>
<ul>
<li><p>输入，Scanner类，<code>import java.util.*</code>。详查API。</p>
</li>
<li><p>Java SE 6引入Console类，便于处理密码等不可见的输入，Console类每次只能读取一行，没有读一个int、一个单词、一个double这种操作。出于安全考虑，涉及密码操作时，处理后需要把存过密码的数组复写。详查API。</p>
</li>
<li><p>格式化输出，System.out.print系列。沿用了C中的printf。format转换表见P57。</p>
</li>
<li><p>格式化打印时间：P59。</p>
</li>
<li><p>文件输入与输出，需要把文件对象作为参数喂给Scanner对象，通过操作这个对象实现文件的读;</p>
</li>
<li>把文件对象作为参数喂给PrintWriter对象，通过操作这个对象实现文件的写，对象的方法和System.out类似。</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git学习笔记]]></title>
      <url>/2017/10/17/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<ul>
<li>git init<ul>
<li>初始化git仓库</li>
</ul>
</li>
<li>git add filename<ul>
<li>把修改后的文件放进暂存区</li>
</ul>
</li>
<li>git commit -m “commitment information”<ul>
<li>将暂存区的文件提交到分支，<strong><code>-m</code></strong>后接提交说明</li>
</ul>
</li>
<li>git status<ul>
<li>查看当前状态</li>
</ul>
</li>
<li>git diff [filename]<ul>
<li>若暂存区有内容，则对比暂存区和工作区的差异，否则对比分支和工作区的差异</li>
</ul>
</li>
<li>git log [–pretty=oneline]<ul>
<li>记录历史提交记录，<strong><code>--pretty=oneline</code></strong>表示简化展示</li>
</ul>
</li>
<li>git reflog<ul>
<li>记录每一次命令</li>
</ul>
</li>
<li>git reset –hard HEAD^<ul>
<li>版本回退，一个^表示回退一次commit的版本，用HEAD~N回退N个版本</li>
</ul>
</li>
<li>git diff HEAD – filename<ul>
<li>对比某文件在工作区和分支中最新版本的差异</li>
</ul>
</li>
<li>git checkout – filename<ul>
<li>若工作区发生修改且没放进暂存区，则把工作区的变动撤销</li>
<li>若工作区内容放进暂存区了，然后修改了，则用暂存区的内容覆盖工作区的内容</li>
</ul>
</li>
<li>git reset HEAD filename<ul>
<li>把暂存区的修改撤销掉，后可以再git checkout – filename来把工作区的也撤销</li>
</ul>
</li>
<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</li>
<li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</li>
<li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</li>
<li>git rm filename<ul>
<li>从分支中删除一个文件</li>
</ul>
</li>
</ul>
<hr>
<p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；</p>
<p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p>
<p>$ git clone git@github.com:michaelliao/gitskills.git</p>
<hr>
<p>Git鼓励大量使用分支：</p>
<p>查看分支：git branch</p>
<p>创建分支：git branch <name></name></p>
<p>切换分支：git checkout <name></name></p>
<p>创建+切换分支：git checkout -b <name></name></p>
<p>合并某分支到当前分支：git merge <name></name></p>
<p>删除分支：git branch -d <name></name></p>
<hr>
<p>查看远程库信息，使用git remote -v；</p>
<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
<p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p>
<p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</p>
<p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</p>
<p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>
<hr>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[身处深沟一身锈，遇上彩虹方知有]]></title>
      <url>/2017/10/11/%E8%BA%AB%E5%A4%84%E6%B7%B1%E6%B2%9F%E4%B8%80%E8%BA%AB%E9%94%88%EF%BC%8C%E9%81%87%E4%B8%8A%E5%BD%A9%E8%99%B9%E6%96%B9%E7%9F%A5%E6%9C%89/</url>
      <content type="html"><![CDATA[<p>嗯缩写了一首诗</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Test]]></title>
      <url>/2017/10/03/My-New-Post/</url>
      <content type="html"><![CDATA[<p>wow</p>
<p>this is my first blog</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
